import glob
import shutil
import os

deb_build_depends = {'debhelper': '8.0.0',
                     'python': '2.7.3',
                     'g++': '4:4.6.3',
                     'pkg-config': '0.26',
                     'libssh-dev': '0.5.2',
                     'libsndfile1-dev': '1.0.25',
                     'libgtk2.0-dev': '2.24.10'}

deb_depends = dict()

deb_depends['12.04'] = {'libc6': '2.15',
                        'libssh-4': '0.5.2',
                        'libboost-filesystem1.48.0': '1.48.0-3',
                        'libboost-thread1.48.0': '1.48.0-3',
                        'libsndfile1': '1.0.25',
                        'libmagick++4': '8:6.6.9.7',
                        'libxml++2.6-2': '2.34.1',
                        'libgtk2.0-0': '2.24.10',
                        'libxmlsec1': '1.2.14-1.2build1',
                        'libxmlsec1-openssl': '1.2.14-1.2build1',
                        'libboost-date-time1.48.0': '1.48.0-3',
                        'libcurl3': '7.22.0-3ubuntu4',
                        'libzip2': '0.10-1ubuntu1'}

deb_depends['12.10'] = {'libc6': '2.15',
                        'libssh-4': '0.5.2',
                        'libboost-filesystem1.49.0': '1.49.0',
                        'libboost-thread1.49.0': '1.49.0',
                        'libsndfile1': '1.0.25',
                        'libmagick++5': '8:6.7.7.10',
                        'libxml++2.6-2': '2.34.2',
                        'libgtk2.0-0': '2.24.13',
                        'libxmlsec1': '1.2.18-2',
                        'libxmlsec1-openssl': '1.2.18-2',
                        'libboost-date-time1.49.0': '1.49.0',
                        'libcurl3': '7.27.0-1ubuntu1',
                        'libzip2': '0.10.1-1.1'}

deb_depends['13.04'] = {'libc6': '2.15',
                        'libssh-4': '0.5.2',
                        'libboost-filesystem1.49.0': '1.49.0',
                        'libboost-thread1.49.0': '1.49.0',
                        'libsndfile1': '1.0.25',
                        'libmagick++5': '8:6.7.7.10',
                        'libxml++2.6-2': '2.34.2',
                        'libgtk2.0-0': '2.24.13',
                        'libxmlsec1': '1.2.18-2',
                        'libxmlsec1-openssl': '1.2.18-2',
                        'libboost-date-time1.49.0': '1.49.0',
                        'libcurl3': '7.29.0-1ubuntu3',
                        'libzip2': '0.10.1-1.1'}

deb_depends['13.10'] = {'libc6': '2.17-93',
                        'libssh-4': '0.5.4',
                        'libboost-filesystem1.53.0': '1.53.0',
                        'libboost-thread1.53.0': '1.53.0',
                        'libsndfile1': '1.0.25',
                        'libmagick++5': '8:6.7.7.10',
                        'libxml++2.6-2': '2.36.0',
                        'libgtk2.0-0': '2.24.20',
                        'libxmlsec1': '1.2.18-2',
                        'libxmlsec1-openssl': '1.2.18-2',
                        'libboost-date-time1.49.0': '1.49.0',
                        'libcurl3': '7.29.0-1ubuntu3',
                        'libzip2': '0.10.1-1.1'}

deb_depends['14.04'] = {'libc6': '2.19-0ubuntu6',
                        'libssh-4': '0.6.1-0ubuntu3',
                        'libboost-filesystem1.54.0': '1.54.0-4ubuntu3',
                        'libboost-thread1.54.0': '1.54.0-4ubuntu3',
                        'libsndfile1': '1.0.25-7ubuntu2',
                        'libmagick++5': '8:6.7.7.10-6ubuntu3',
                        'libxml++2.6-2': '2.36.0-2ubuntu1',
                        'libgtk2.0-0': '2.24.23-0ubuntu1',
                        'libxmlsec1': '1.2.18-2ubuntu1',
                        'libxmlsec1-openssl': '1.2.18-2ubuntu1',
                        'libboost-date-time1.54.0': '1.54.0-4ubuntu3',
                        'libcurl3': '7.35.0-1ubuntu2',
                        'libzip2': '0.10.1-1.2'}

deb_depends['7'] = {'libc6': '2.13',
                    'libssh-4': '0.5.4',
                    'libboost-filesystem1.49.0': '1.49.0',
                    'libboost-thread1.49.0': '1.49.0',
                    'libsndfile1': '1.0.25',
                    'libmagick++5': '8:6.7.7.10',
                    'libxml++2.6-2': '2.34.2',
                    'libgtk2.0-0': '2.24.10',
                    'libxmlsec1': '1.2.18',
                    'libboost-date-time1.49.0': '1.49.0',
                    'libxmlsec1-openssl': '1.2.18',
                    'libcurl3': '7.26.0',
                    'libzip2': '0.10.1'}

deb_depends['unstable'] = {'libc6': '2.13',
                    'libssh-4': '0.5.4',
                    'libboost-filesystem1.55.0': '1.55.0',
                    'libboost-thread1.55.0': '1.55.0',
                    'libsndfile1': '1.0.25',
                    'libmagick++5': '8:6.7.7.10',
                    'libxml++2.6-2': '2.34.2',
                    'libgtk2.0-0': '2.24.10',
                    'libxmlsec1': '1.2.18',
                    'libboost-date-time1.55.0': '1.55.0',
                    'libxmlsec1-openssl': '1.2.18',
                    'libcurl3': '7.26.0',
                    'libzip2': '0.10.1'}


def packages(name, packages, f):
    s = '%s: ' % name
    for p in packages:
        s += str(p) + ', '
    print >>f,s[:-2]

def make_control(debian_version, bits, filename, debug):
    f = open(filename, 'w')
    print >>f,'Source: dcpomatic'
    print >>f,'Section: video'
    print >>f,'Priority: extra'
    print >>f,'Maintainer: Carl Hetherington <carl@dcpomatic.com>'
    packages('Build-Depends', deb_build_depends, f)
    print >>f,'Standards-Version: 3.9.3'
    print >>f,'Homepage: http://dcpomatic.com/'
    print >>f,''
    print >>f,'Package: dcpomatic'
    if bits == 32:
        print >>f,'Architecture: i386'
    else:
        print >>f,'Architecture: amd64'

    packages('Depends', deb_depends[debian_version], f)

    print >>f,'Description: Generator of Digital Cinema Packages (DCPs)'
    print >>f,'  DCP-o-matic generates Digital Cinema Packages (DCPs) from video and audio'
    print >>f,'  files (such as those from DVDs or Blu-Rays) for presentation on DCI-compliant'
    print >>f,'  digital projectors.'

    if debug:
        print >>f,''
        print >>f,'Package: dcpomatic-dbg'
        if bits == 32:
            print >>f,'Architecture: i386'
        else:
            print >>f,'Architecture: amd64'
        print >>f,'Section: debug'
        print >>f,'Priority: extra'
        packages('Depends', deb_depends[debian_version], f)
        print >>f,'Description: debugging symbols for dcpomatic'
        print >>f,'  This package contains the debugging symbols for dcpomatic.'
        print >>f,''

def dependencies(target):
    return (('ffmpeg-cdist', 'f69bb08'),
            ('libdcp', '8e7f9e4'),
            ('libsub', 'f66b11f'))

def build(target, options):
    cmd = './waf configure --prefix=%s' % target.directory
    if target.debug:
        cmd += ' --enable-debug'
    if target.platform == 'windows':
        cmd += ' --target-windows'
    elif target.platform == 'linux':
        if target.distro == 'debian' or target.distro == 'ubuntu':
            cmd += ' --target-debian'
            if target.version == 'unstable':
                cmd += ' --debian-unstable'
        elif target.distro == 'centos':
            if target.version == '6.5':
                cmd += ' --target-centos-6 --disable-tests'
            elif target.version == '7':
                cmd += ' --target-centos-7 --disable-tests'

    target.command(cmd)
    target.command('./waf')

    if target.platform == 'linux' or target.platform == 'osx':
        target.command('./waf install')

def package_windows(target):
    shutil.copyfile('build/platform/windows/installer.%s.nsi' % target.bits, 'build/platform/windows/installer2.%s.nsi' % target.bits)
    target.command('sed -i "s~%%resources%%~%s/platform/windows~g" build/platform/windows/installer2.%s.nsi' % (os.getcwd(), target.bits))
    target.command('sed -i "s~%%static_deps%%~%s~g" build/platform/windows/installer2.%s.nsi' % (target.windows_prefix, target.bits))
    target.command('sed -i "s~%%cdist_deps%%~%s~g" build/platform/windows/installer2.%s.nsi' % (target.directory, target.bits))
    target.command('sed -i "s~%%mingw%%~%s~g" build/platform/windows/installer2.%s.nsi' % (target.mingw_path, target.bits))
    target.command('sed -i "s~%%binaries%%~%s/build~g" build/platform/windows/installer2.%s.nsi' % (os.getcwd(), target.bits))
    target.command('sed -i "s~%%bits%%~32~g" build/platform/windows/installer2.%s.nsi' % target.bits)
    target.command('makensis build/platform/windows/installer2.%s.nsi' % target.bits)
    return os.path.abspath(glob.glob('build/platform/windows/*%s*.exe' % target.bits)[0])

def package_debian(target, cpu, version):
    make_control(target.version, target.bits, 'debian/control', target.debug)
    target.command('./waf dist')
    f = open('debian/files', 'w')
    print >>f,'dcpomatic_%s-1_%s.deb video extra' % (version, cpu)
    shutil.rmtree('build/deb', ignore_errors=True)
    
    os.makedirs('build/deb')
    os.chdir('build/deb')
    shutil.move('../../dcpomatic-%s.tar.bz2' % version, 'dcpomatic_%s.orig.tar.bz2' % version)
    target.command('tar xjf dcpomatic_%s.orig.tar.bz2' % version)
    os.chdir('dcpomatic-%s' % version)
    target.command('dch -b -v %s-1 "New upstream release."' % version)
    target.set('CDIST_LINKFLAGS', target.get('LINKFLAGS'))
    target.set('CDIST_CXXFLAGS', target.get('CXXFLAGS'))
    target.set('CDIST_PKG_CONFIG_PATH', target.get('PKG_CONFIG_PATH'))
    if target.version == 'unstable':
        target.set('CDIST_EXTRA_CONFIGURE', '--debian-unstable')
    target.command('dpkg-buildpackage -uc -us')
    
    debs = []
    for p in glob.glob('../*.deb'):
        debs.append(os.path.abspath(p))
    
    return debs

def package_centos(target, cpu, version):
    topdir = os.path.realpath('build/rpmbuild')
    os.makedirs('%s/BUILD' % topdir)
    os.makedirs('%s/RPMS' % topdir)
    os.makedirs('%s/SOURCES' % topdir)
    os.makedirs('%s/SPECS' % topdir)
    os.makedirs('%s/SRPMS' % topdir)

    target.command('./waf dist')
    shutil.copyfile(
        "%s/src/dcpomatic/dcpomatic-%s.tar.bz2" % (target.directory, version),
        "%s/SOURCES/dcpomatic-%s.tar.bz2" % (topdir, version)
        )

    target.command('rpmbuild --define \'_topdir %s\' -bb build/platform/linux/dcpomatic2.spec' % topdir)
    rpms = []

    if cpu == "amd64":
        cpu = "x86_64"

    for p in glob.glob('%s/RPMS/%s/*.rpm' % (topdir, cpu)):
        rpms.append(os.path.abspath(p))

    return rpms

def package(target, version):
    if target.platform == 'windows':
        return package_windows(target)
    elif target.platform == 'linux':
        if target.bits == 32:
    	    cpu = 'i386'
        else:	
            cpu	= 'amd64'

	if target.distro == 'debian' or target.distro == 'ubuntu':
            return package_debian(target, cpu, version)
        elif target.distro == 'centos':
            return package_centos(target, cpu, version)
    elif target.platform == 'osx':
        target.command('bash platform/osx/make_dmg.sh %s' % target.directory)
        return os.path.abspath(glob.glob('build/platform/osx/DCP-o-matic*.dmg')[0])

def make_pot(target):
    target.command('./waf pot')
    return [os.path.abspath('build/src/lib/libdcpomatic.pot'),
            os.path.abspath('build/src/wx/libdcpomatic-wx.pot'),
	    os.path.abspath('build/src/tools/dcpomatic.pot')]

def make_manual(target):
    os.chdir('doc/manual')
    target.command('make')
    target.command('pdflatex colour.tex')
    return [os.path.abspath('pdf'), os.path.abspath('html'), os.path.abspath('colour.pdf')]

def test(target):
    if target.platform != 'windows':
        target.set('LC_ALL', 'C')
        target.command('run/tests')
