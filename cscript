import glob
import shutil
import os

def dependencies(target):
    if target.platform == 'windows':
        return ()
    else:
        return (('openjpeg-cdist', None),
                ('ffmpeg-cdist', '7a23ec9c771184ab563cfe24ad9b427f38368961'),
                ('libdcp', 'v0.52'))

def build(env, target):
    cmd = './waf configure --prefix=%s' % env.work_dir_cscript()
    if target.platform == 'windows':
        cmd += ' --target-windows'
    else:
        cmd += ' --static'
    env.command(cmd)

    env.command('./waf')

    if target.platform == 'linux' or target.platform == 'osx':
        env.command('./waf install')


def package(env, target, version):
    if target.platform == 'windows':
        shutil.copyfile('build/platform/windows/installer.%s.nsi' % target.bits, 'build/platform/windows/installer2.%s.nsi' % target.bits)
        env.command('sed -i "s~%%resources%%~%s/windows~g" build/platform/windows/installer2.%s.nsi' % (os.getcwd(), target.bits))
        env.command('sed -i "s~%%deps%%~%s~g" build/platform/windows/installer2.%s.nsi' % (env.windows_prefix, target.bits))
        env.command('sed -i "s~%%binaries%%~%s/build~g" build/platform/windows/installer2.%s.nsi' % (os.getcwd(), target.bits))
        env.command('sed -i "s~%%bits%%~32~g" build/platform/windows/installer2.%s.nsi' % target.bits)
        env.command('makensis build/platform/windows/installer2.%s.nsi' % target.bits)
        return os.path.abspath(glob.glob('build/platform/windows/*%s*.exe' % target.bits)[0])
    elif target.platform == 'linux':
        if target.bits == 32:
            cpu = 'i386'
        else:
            cpu = 'amd64'

        shutil.copyfile('platform/linux/control-%s-%d' % (target.version, target.bits), 'debian/control')
        env.command('./waf dist')
        f = open('debian/files', 'w')
        print >>f,'dvdomatic_%s-1_%s.deb video extra' % (version, cpu)
        shutil.rmtree('build/deb', ignore_errors=True)

        os.makedirs('build/deb')
        os.chdir('build/deb')
        shutil.move('../../dvdomatic-%s.tar.bz2' % version, 'dvdomatic_%s.orig.tar.bz2' % version)
        env.command('tar xjf dvdomatic_%s.orig.tar.bz2' % version)
        os.chdir('dvdomatic-%s' % version)
        env.command('dch -b -v %s-1 "New upstream release."' % version)
        env.set('CDIST_LINKFLAGS', env.get('LINKFLAGS'))
        env.set('CDIST_CXXFLAGS', env.get('CXXFLAGS'))
        env.set('CDIST_PKG_CONFIG_PATH', env.get('PKG_CONFIG_PATH'))
        env.command('dpkg-buildpackage')
        
        debs = []
        for p in glob.glob('../*.deb'):
            debs.append(os.path.abspath(p))

        return debs

def make_pot(env):
    env.command('./waf pot')
    return [os.path.abspath('build/src/lib/libdvdomatic.pot'),
            os.path.abspath('build/src/wx/libdvdomatic-wx.pot'),
	    os.path.abspath('build/src/tools/dvdomatic.pot')]

def make_manual(env):
    os.chdir('doc/manual')
    env.command('make')
    return [os.path.abspath('pdf'), os.path.abspath('html')]
