def options(opt):
    opt.load('compiler_cxx')
    opt.add_option('--debug-hash', action='store_true', default = False, help = 'print hashes of data at various points')
    opt.add_option('--enable-debug', action='store_true', default = False, help = 'build with debugging information and without optimisation')

def configure(conf):
    conf.load('compiler_cxx')

    conf.env.append_value('CXXFLAGS', ['-D__STDC_CONSTANT_MACROS', '-D__STDC_LIMIT_MACROS', '-msse', '-mfpmath=sse', '-ffast-math', '-Wall'])

    conf.env.DEBUG_HASH = conf.options.debug_hash
    if conf.options.debug_hash:
        conf.env.append_value('CXXFLAGS', '-DDEBUG_HASH')
        conf.check_cc(msg = 'Checking for library libmhash', function_name = 'mhash_init', header_name = 'mhash.h', lib = 'mhash', uselib_store = 'MHASH')

    if conf.options.enable_debug:
        conf.env.append_value('CXXFLAGS', '-g')
    else:
        conf.env.append_value('CXXFLAGS', '-O3')

    conf.check_cfg(package = 'glib-2.0', args = '--cflags --libs', uselib_store = 'GLIB', mandatory = True)
    conf.check_cfg(package = 'gtkmm-2.4', args = '--cflags --libs', uselib_store = 'GTKMM', mandatory = True)
    conf.check_cfg(package = 'libavformat', args = '--cflags --libs', uselib_store = 'AVFORMAT', mandatory = True)
    conf.check_cfg(package = 'libavfilter', args = '--cflags --libs', uselib_store = 'AVFILTER', mandatory = True)
    conf.check_cfg(package = 'libavcodec', args = '--cflags --libs', uselib_store = 'AVCODEC', mandatory = True)
    conf.check_cfg(package = 'libavutil', args = '--cflags --libs', uselib_store = 'AVUTIL', mandatory = True)
    conf.check_cfg(package = 'libswscale', args = '--cflags --libs', uselib_store = 'SWSCALE', mandatory = True)
    conf.check_cfg(package = 'libswresample', args = '--cflags --libs', uselib_store = 'SWRESAMPLE', mandatory = True)
    conf.check_cfg(package = 'libpostproc', args = '--cflags --libs', uselib_store = 'POSTPROC', mandatory = True)
    conf.check_cfg(package = 'sndfile', args = '--cflags --libs', uselib_store = 'SNDFILE', mandatory = True)
    conf.check_cc(msg = 'Checking for library libtiff', function_name = 'TIFFOpen', header_name = 'tiffio.h', lib = 'tiff', uselib_store = 'TIFF')
    conf.check_cc(fragment  = """
    			      #include <stdio.h>\n
			      #include <openjpeg.h>\n
			      int main () {\n
			      void* p = (void *) opj_image_create;\n
			      return 0;\n
			      }
			      """, msg = 'Checking for library openjpeg', lib = 'openjpeg', uselib_store = 'OPENJPEG')
			      
    conf.check_cxx(fragment = """
    			      #include <boost/thread.hpp>\n
    			      int main() { boost::thread t (); }\n
			      """, msg = 'Checking for boost threading library', lib = 'boost_thread', uselib_store = 'BOOST_THREAD')
    conf.check_cxx(fragment = """
    			      #include <boost/filesystem.hpp>\n
    			      int main() { boost::filesystem::copy_file ("a", "b"); }\n
			      """, msg = 'Checking for boost filesystem library', lib = ['boost_filesystem', 'boost_system'], uselib_store = 'BOOST_FILESYSTEM')
    conf.check_cxx(fragment = """
    			      #include <boost/program_options.hpp>\n
    			      int main() { boost::program_options::options_description ("foo"); }\n
			      """, msg = 'Checking for boost program options library', lib = ['boost_program_options', 'boost_system'], uselib_store = 'BOOST_PROGRAM_OPTIONS')
    conf.check_cxx(fragment = """
                              #define BOOST_TEST_MODULE Config test\n
    			      #include <boost/test/unit_test.hpp>\n
                              int main() {}
                              """, msg = 'Checking for boost unit testing library', lib = 'boost_unit_test_framework', uselib_store = 'BOOST_TEST')

def build(bld):
    bld.recurse('src')
    bld.recurse('tools')
    bld.recurse('test')
