#
#    Copyright (C) 2012-2015 Carl Hetherington <cth@carlh.net>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

import os
import glob
import shlex
import subprocess
from waflib import Logs
import i18n

sources = """
          about_dialog.cc
          audio_dialog.cc
          audio_gain_dialog.cc
          audio_mapping_view.cc
          audio_panel.cc
          audio_plot.cc
          cinema_dialog.cc
          colour_conversion_editor.cc
          config_dialog.cc
          content_colour_conversion_dialog.cc
          content_menu.cc
          content_properties_dialog.cc
          isdcf_metadata_dialog.cc
          dir_picker_ctrl.cc
          dolby_certificate_dialog.cc
          doremi_certificate_dialog.cc
          download_certificate_dialog.cc
          film_editor.cc
          film_editor_panel.cc
          film_viewer.cc
          filter_dialog.cc
          filter_editor.cc
          gain_calculator_dialog.cc
          hints_dialog.cc
          image_sequence_dialog.cc
          job_manager_view.cc
          kdm_dialog.cc
          key_dialog.cc
          new_film_dialog.cc
          properties_dialog.cc
          repeat_dialog.cc
          screen_dialog.cc
          server_dialog.cc
          servers_list_dialog.cc
          subtitle_panel.cc
          table_dialog.cc
          timecode.cc
          timeline.cc
          timeline_dialog.cc
          timeline_time_axis_view.cc
          timeline_video_content_view.cc
          timeline_audio_content_view.cc
          timeline_content_view.cc
          timeline_view.cc
          timing_panel.cc
          update_dialog.cc
          video_panel.cc
          wx_util.cc
          wx_ui_signaller.cc
          """

def configure(conf):
    conf.check_cfg(msg='Checking for wxWidgets',
                   package='',
                   path='wx-config',
                   args='--cppflags --cxxflags --libs std,richtext',
                   uselib_store='WXWIDGETS',
                   mandatory=True)

    if conf.options.static_wxwidgets:
	# wx-config returns its static libraries as full paths, without -l prefixes, which confuses
        # check_cfg().  It puts the static libraries into LINKFLAGS_WXWIDGETS, so fish them out.
        stlibs = []
        new_linkflags = []
        stlib_paths = []
        for f in conf.env.LINKFLAGS_WXWIDGETS:
            if f.startswith('/'):
                d = os.path.dirname(f)
                if not d in stlib_paths:
                    stlib_paths.append(d)
                stlibs.append(os.path.basename(f)[3:-2])
            else:
                new_linkflags.append(f)
        
        conf.env.STLIB_WXWIDGETS = stlibs
        conf.env.LINKFLAGS_WXWIDGETS = new_linkflags
        conf.env.STLIBPATH_WXWIDGETS = stlib_paths

    conf.in_msg = 1
    wx_version = conf.check_cfg(package='', path='wx-config', args='--version').strip()
    conf.im_msg = 0
    if not wx_version.startswith('3.0.'):
        conf.fatal('wxwidgets version 3.0.x is required; %s found' % wx_version)

def build(bld):
    if bld.env.STATIC_DCPOMATIC:
        obj = bld(features = 'cxx cxxstlib')
    else:
        obj = bld(features = 'cxx cxxshlib')

    obj.name   = 'libdcpomatic-wx'
    obj.export_includes = ['..']
    obj.uselib = 'WXWIDGETS DCP'
    if bld.env.TARGET_LINUX:
        obj.uselib += ' GTK'
    obj.use = 'libdcpomatic'
    obj.source = sources
    obj.target = 'dcpomatic-wx'

    i18n.po_to_mo(os.path.join('src', 'wx'), 'libdcpomatic-wx', bld)

def pot(bld):
    i18n.pot(os.path.join('src', 'wx'), sources + " editable_list.h", 'libdcpomatic-wx')

def pot_merge(bld):
    i18n.pot_merge(os.path.join('src', 'wx'), 'libdcpomatic-wx')
