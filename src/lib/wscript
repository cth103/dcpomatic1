import os
import i18n

sources = """
          analyse_audio_job.cc
          audio_analysis.cc
          audio_buffers.cc
          audio_content.cc
          audio_decoder.cc
          audio_mapping.cc
          config.cc
          content.cc
          cross.cc
          dci_metadata.cc
          dcp_content_type.cc
          dcp_video_frame.cc
          decoder.cc
          dolby_cp750.cc
          encoder.cc
          examine_content_job.cc
          exceptions.cc
          filter_graph.cc
          ffmpeg.cc
          ffmpeg_content.cc
          ffmpeg_decoder.cc
          ffmpeg_examiner.cc
          film.cc
          filter.cc
          image.cc
          imagemagick_content.cc
          imagemagick_decoder.cc
          imagemagick_examiner.cc
          job.cc
          job_manager.cc
          log.cc
          lut.cc
          player.cc
          playlist.cc
          ratio.cc
          resampler.cc
          scp_dcp_job.cc
          scaler.cc
          server.cc
          sndfile_content.cc
          sndfile_decoder.cc
          sound_processor.cc
          subtitle_content.cc
          subtitle_decoder.cc
          timer.cc
          transcode_job.cc
          transcoder.cc
          types.cc
          ui_signaller.cc
          util.cc
          video_content.cc
          video_decoder.cc
          writer.cc
          """

def build(bld):
    if bld.env.STATIC:
        obj = bld(features = 'cxx cxxstlib')
    else:
        obj = bld(features = 'cxx cxxshlib')

    obj.name = 'libdcpomatic'
    obj.export_includes = ['.']
    obj.uselib = """
                 AVCODEC AVUTIL AVFORMAT AVFILTER SWSCALE SWRESAMPLE 
                 BOOST_FILESYSTEM BOOST_THREAD BOOST_DATETIME BOOST_SIGNALS2 
                 SNDFILE OPENJPEG POSTPROC TIFF MAGICK SSH DCP CXML GLIB LZMA
                 """

    obj.source = sources + ' version.cc'

    if bld.env.TARGET_WINDOWS:
        obj.uselib += ' WINSOCK2 BFD DBGHELP IBERTY SHLWAPI'
        obj.source += ' stack.cpp'
    if bld.env.STATIC:
        obj.uselib += ' XML++'

    obj.target = 'dcpomatic'

    i18n.po_to_mo(os.path.join('src', 'lib'), 'libdcpomatic', bld)

def pot(bld):
    i18n.pot(os.path.join('src', 'lib'), sources, 'libdcpomatic')

def pot_merge(bld):
    i18n.pot_merge(os.path.join('src', 'lib'), 'libdcpomatic')
